// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  CLIENT
  ADMIN
  DELIVERY
}

model User {
  id                String    @id @default(cuid())
  email             String    @unique
  firstName         String    @map("first_name")
  lastName          String    @map("last_name")
  phone             String?
  profileImage      String?   @map("profile_image")
  passwordHash      String    @map("password_hash")
  role              UserRole  @default(CLIENT)
  isEmailVerified   Boolean   @default(false) @map("is_email_verified")
  isPhoneVerified   Boolean   @default(false) @map("is_phone_verified")
  fcmToken          String?   @map("fcm_token")
  createdAt         DateTime  @default(now()) @map("created_at")
  updatedAt         DateTime  @updatedAt @map("updated_at")

  // Relations
  addresses         Address[]
  cart              Cart?
  orders            Order[]
  notifications     Notification[]
  reviews           Review[]

  @@map("users")
}

model Address {
  id              String    @id @default(cuid())
  userId          String    @map("user_id")
  firstName       String    @map("first_name")
  lastName        String    @map("last_name")
  address         String
  city            String
  state           String
  zipCode         String    @map("zip_code")
  country         String
  phone           String?
  isDefault       Boolean   @default(false) @map("is_default")
  label           String?   // Maison, Bureau, etc.
  latitude        Decimal?  @db.Decimal(10, 8)
  longitude       Decimal?  @db.Decimal(11, 8)
  inServiceZone   Boolean   @default(false) @map("in_service_zone")
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")

  // Relations
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  shippingOrders  Order[]   @relation("ShippingAddress")
  billingOrders   Order[]   @relation("BillingAddress")

  @@map("addresses")
}

model Brand {
  id          String    @id @default(cuid())
  name        String    @unique
  logo        String?
  colors      Json?     // Array of colors
  gasColor    String?   @map("gas_color")
  description String?
  hotline     String?
  website     String?
  isActive    Boolean   @default(true) @map("is_active")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")

  // Relations
  products    Product[]

  @@map("brands")
}

model Category {
  id            String    @id @default(cuid())
  name          String    @unique
  pricePurchase Decimal   @db.Decimal(10, 2) @map("price_purchase")
  priceRefill   Decimal   @db.Decimal(10, 2) @map("price_refill")
  currentName   String?   @map("current_name")
  usage         String?
  size          String?
  weight        Decimal?  @db.Decimal(8, 2)
  unit          String?
  isActive      Boolean   @default(true) @map("is_active")
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  // Relations
  products      Product[]

  @@map("categories")
}

model Type {
  id        String    @id @default(cuid())
  name      String    @unique
  isActive  Boolean   @default(true) @map("is_active")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")

  // Relations
  products  Product[]

  @@map("types")
}

model Product {
  id          String    @id @default(cuid())
  brandId     String    @map("brand_id")
  categoryId  String    @map("category_id")
  typeId      String    @map("type_id")
  rating      Decimal   @default(0) @db.Decimal(3, 2)
  imageUrl    String?   @map("image_url")
  isActive    Boolean   @default(true) @map("is_active")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")

  // Relations
  brand       Brand     @relation(fields: [brandId], references: [id])
  category    Category  @relation(fields: [categoryId], references: [id])
  type        Type      @relation(fields: [typeId], references: [id])
  cartItems   CartItem[]
  orderItems  OrderItem[]
  shopStocks  ShopStock[]
  reviews     Review[]

  @@map("products")
}

model Shop {
  id        String    @id @default(cuid())
  name      String
  address   String
  city      String
  state     String
  latitude  Decimal   @db.Decimal(10, 8)
  longitude Decimal   @db.Decimal(11, 8)
  phone     String
  email     String?
  isActive  Boolean   @default(true) @map("is_active")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")

  // Relations
  stocks    ShopStock[]

  @@map("shops")
}

model ShopStock {
  id        String    @id @default(cuid())
  shopId    String    @map("shop_id")
  productId String    @map("product_id")
  quantity  Int
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")

  // Relations
  shop      Shop      @relation(fields: [shopId], references: [id], onDelete: Cascade)
  product   Product   @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([shopId, productId])
  @@map("shop_stocks")
}

model Cart {
  id                String    @id @default(cuid())
  userId            String    @unique @map("user_id")
  subtotal          Decimal   @default(0) @db.Decimal(10, 2)
  shippingCost      Decimal   @default(0) @db.Decimal(10, 2) @map("shipping_cost")
  tax               Decimal   @default(0) @db.Decimal(10, 2)
  discount          Decimal   @default(0) @db.Decimal(10, 2)
  total             Decimal   @default(0) @db.Decimal(10, 2)
  promoCode         String?   @map("promo_code")
  promoDiscount     Decimal?  @db.Decimal(10, 2) @map("promo_discount")
  isUrgentDelivery  Boolean   @default(false) @map("is_urgent_delivery")
  createdAt         DateTime  @default(now()) @map("created_at")
  updatedAt         DateTime  @updatedAt @map("updated_at")

  // Relations
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  items             CartItem[]

  @@map("carts")
}

model CartItem {
  id            String        @id @default(cuid())
  cartId        String        @map("cart_id")
  productId     String        @map("product_id")
  quantity      Int
  itemType      CartItemType  @map("item_type")
  unitPrice     Decimal       @db.Decimal(10, 2) @map("unit_price")
  totalPrice    Decimal       @db.Decimal(10, 2) @map("total_price")
  selectedSize  String?       @map("selected_size")
  selectedColor String?       @map("selected_color")
  createdAt     DateTime      @default(now()) @map("created_at")
  updatedAt     DateTime      @updatedAt @map("updated_at")

  // Relations
  cart          Cart          @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product       Product       @relation(fields: [productId], references: [id])

  @@unique([cartId, productId, itemType])
  @@map("cart_items")
}

model Order {
  id                String        @id @default(cuid())
  userId            String        @map("user_id")
  orderNumber       String        @unique @map("order_number")
  subtotal          Decimal       @db.Decimal(10, 2)
  shippingCost      Decimal       @db.Decimal(10, 2) @map("shipping_cost")
  tax               Decimal       @db.Decimal(10, 2)
  total             Decimal       @db.Decimal(10, 2)
  status            OrderStatus
  paymentMethod     PaymentMethod @map("payment_method")
  paymentId         String?       @map("payment_id")
  shippingAddressId String        @map("shipping_address_id")
  billingAddressId  String        @map("billing_address_id")
  trackingNumber    String?       @map("tracking_number")
  notes             String?
  shippedAt         DateTime?     @map("shipped_at")
  deliveredAt       DateTime?     @map("delivered_at")
  createdAt         DateTime      @default(now()) @map("created_at")
  updatedAt         DateTime      @updatedAt @map("updated_at")

  // Relations
  user              User          @relation(fields: [userId], references: [id])
  shippingAddress   Address       @relation("ShippingAddress", fields: [shippingAddressId], references: [id])
  billingAddress    Address       @relation("BillingAddress", fields: [billingAddressId], references: [id])
  items             OrderItem[]

  @@map("orders")
}

model OrderItem {
  id            String        @id @default(cuid())
  orderId       String        @map("order_id")
  productId     String        @map("product_id")
  quantity      Int
  itemType      CartItemType  @map("item_type")
  unitPrice     Decimal       @db.Decimal(10, 2) @map("unit_price")
  totalPrice    Decimal       @db.Decimal(10, 2) @map("total_price")
  selectedSize  String?       @map("selected_size")
  selectedColor String?       @map("selected_color")
  createdAt     DateTime      @default(now()) @map("created_at")
  updatedAt     DateTime      @updatedAt @map("updated_at")

  // Relations
  order         Order         @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product       Product       @relation(fields: [productId], references: [id])

  @@map("order_items")
}

model DeliveryZone {
  id                        String    @id @default(cuid())
  name                      String    @unique
  basePrice                 Decimal   @db.Decimal(10, 2) @map("base_price")
  pricePerKm                Decimal   @db.Decimal(10, 2) @map("price_per_km")
  freeDeliveryThreshold      Decimal?  @db.Decimal(10, 2) @map("free_delivery_threshold")
  supportsUrgentDelivery     Boolean   @default(true) @map("supports_urgent_delivery")
  polygonCoordinates         Json      @map("polygon_coordinates")
  isActive                  Boolean   @default(true) @map("is_active")
  createdAt                 DateTime  @default(now()) @map("created_at")
  updatedAt                 DateTime  @updatedAt @map("updated_at")

  // Relations
  pricingRules              DeliveryPricingRule[]

  @@map("delivery_zones")
}

model DeliveryPricingRule {
  id                String       @id @default(cuid())
  zoneId            String       @map("zone_id")
  dayOfWeek         Int          @map("day_of_week") // 1-7 (Monday-Sunday)
  startHour         Int          @map("start_hour") // 0-23
  endHour           Int          @map("end_hour") // 0-23
  multiplier        Decimal      @db.Decimal(3, 2) // e.g., 1.20 for +20%
  isUrgent          Boolean      @default(false) @map("is_urgent")
  createdAt         DateTime     @default(now()) @map("created_at")
  updatedAt         DateTime     @updatedAt @map("updated_at")

  // Relations
  zone              DeliveryZone @relation(fields: [zoneId], references: [id], onDelete: Cascade)

  @@map("delivery_pricing_rules")
}

model Notification {
  id        String           @id @default(cuid())
  userId    String           @map("user_id")
  title     String
  message   String
  type      NotificationType
  isRead    Boolean          @default(false) @map("is_read")
  data      Json?            // Additional data for the notification
  createdAt DateTime         @default(now()) @map("created_at")
  updatedAt DateTime         @updatedAt @map("updated_at")

  // Relations
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model Review {
  id        String    @id @default(cuid())
  userId    String    @map("user_id")
  orderId   String    @map("order_id")
  productId String    @map("product_id")
  rating    Int       // 1-5 stars
  comment   String?
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")

  // Relations
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  product   Product   @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, orderId, productId])
  @@map("reviews")
}

// Enums
enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  RETURNED
}

enum PaymentMethod {
  CREDIT_CARD
  DEBIT_CARD
  PAYPAL
  APPLE_PAY
  GOOGLE_PAY
  BANK_TRANSFER
  CASH_ON_DELIVERY
}

enum CartItemType {
  PURCHASE
  REFILL
}

enum NotificationType {
  ORDER
  PROMOTION
  SYSTEM
}

model Currency {
  id                String    @id @default(cuid())
  code              String    @unique
  name              String
  symbol            String
  symbolPosition    String    @map("symbol_position") // 'before' | 'after'
  decimalPlaces     Int       @default(2) @map("decimal_places")
  thousandsSeparator String   @default(",") @map("thousands_separator")
  decimalSeparator  String    @default(".") @map("decimal_separator")
  exchangeRate      Decimal   @default(1) @db.Decimal(10, 4) @map("exchange_rate")
  isDefault         Boolean   @default(false) @map("is_default")
  isActive          Boolean   @default(true) @map("is_active")
  createdAt         DateTime  @default(now()) @map("created_at")
  updatedAt         DateTime  @updatedAt @map("updated_at")

  @@map("currencies")
}
